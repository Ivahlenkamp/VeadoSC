from streamcontroller_plugin_tools import BackendBase

from websockets.sync.client import connect, ClientConnection

from json import dumps, loads
from loguru import logger as log

from ..messages import Request

PREFIX = "nodes:"


class Backend(BackendBase):
    def __init__(self):
        super().__init__()
        self.callback = None

        self.__connect()

    def set_callback(self, f):
        self.callback = f

    def get_count(self) -> int:
        return self.counter

    def increase_count(self) -> None:
        self.__list_states()
        self.counter += 1

        if self.callback:
            self.callback(self.counter)

    def __scan_for_veado_instances():
        pass

    def setState(self, state_name: str):
        pass

    def __connect(self):
        # if not socket or not socket.
        settings = self.frontend.get_settings()
        host = settings.get('ip', localhost)
        port = settings.get('port', 40404)
        self.ws = connect(f'ws://{host}:{port}?n=gg_kekemui_veadosc')
        log.info(self.ws.recv(1))

    def __list_states(self):
        request = {
            "event": "payload",
            "type": "stateEvents",
            "id": "mini",
            "name": "avatar state",
            "payload": {"event": "list"},
        }
        self.ws.send(f"{PREFIX}{dumps(request)}")
        log.info(self.ws.recv())

    def send_request(self, request: Request):
        self.ws.send(request.to_request_string())

    def get_thumbnail(self, state_name: str) -> dict:
        request = {
            "event": "payload",
            "type": "stateEvents",
            "id": "mini",
            "name": "avatar state",
            "payload": {"event": "thumb", "state": state_name},
        }
        self.ws.send(f"{PREFIX}{dumps(request)}")
        resp = self.ws.recv()
        return loads(resp[6:])


backend = Backend()
